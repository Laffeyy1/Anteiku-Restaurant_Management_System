 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author PCB
 */
public final class Order extends javax.swing.JFrame {
    DefaultTableModel dm;

    /**
     * Creates new form HomePage
     */
    public Order() {
        initComponents();
        CategoryBox();
        ProductList();
        Size();
        burrons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SizeGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        CategoryBox = new javax.swing.JComboBox<>();
        IDtxt = new javax.swing.JTextField();
        Totaltxt = new javax.swing.JTextField();
        Paymenttxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        PNametxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        Qty = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        Pricetxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        Size1 = new javax.swing.JCheckBox();
        Size2 = new javax.swing.JCheckBox();
        Size3 = new javax.swing.JCheckBox();
        Removebtn = new com.k33ptoo.components.KButton();
        Addbtn = new com.k33ptoo.components.KButton();
        Paybtn = new com.k33ptoo.components.KButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Receipt = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Menutbl = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Ordertbl = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        Orderbtn = new com.k33ptoo.components.KButton();
        Adminbtn = new com.k33ptoo.components.KButton();
        Userbtn = new com.k33ptoo.components.KButton();
        Salesbtn = new com.k33ptoo.components.KButton();
        Logoutbtn = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        kButton1 = new com.k33ptoo.components.KButton();
        Resetbtn = new com.k33ptoo.components.KButton();
        Closebtn = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Order");
        setMaximumSize(new java.awt.Dimension(1560, 920));
        setMinimumSize(new java.awt.Dimension(1560, 920));
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Order");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 40, -1, -1));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 580, -1, -1));

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));

        CategoryBox.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        CategoryBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a category" }));
        CategoryBox.setToolTipText("");
        CategoryBox.setBorder(null);
        CategoryBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CategoryBoxItemStateChanged(evt);
            }
        });
        CategoryBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryBoxActionPerformed(evt);
            }
        });

        IDtxt.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        IDtxt.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        IDtxt.setEnabled(false);
        IDtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDtxtActionPerformed(evt);
            }
        });

        Totaltxt.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        Totaltxt.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        Totaltxt.setEnabled(false);
        Totaltxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TotaltxtActionPerformed(evt);
            }
        });

        Paymenttxt.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        Paymenttxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaymenttxtActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel3.setText("ID:");

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel4.setText("Total:");

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel5.setText("Payment:");

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel6.setText("Category");

        PNametxt.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        PNametxt.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        PNametxt.setEnabled(false);
        PNametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PNametxtActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel7.setText("Product Name:");

        Qty.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        Qty.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel8.setText("Qty:");

        Pricetxt.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        Pricetxt.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        Pricetxt.setEnabled(false);
        Pricetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PricetxtActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel9.setText("Price:");

        SizeGroup.add(Size1);
        Size1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        Size1.setText("Regualr");
        Size1.setOpaque(false);

        SizeGroup.add(Size2);
        Size2.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        Size2.setText("Tall");
        Size2.setOpaque(false);

        SizeGroup.add(Size3);
        Size3.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        Size3.setText("Grande");
        Size3.setOpaque(false);
        Size3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Size3ActionPerformed(evt);
            }
        });

        Removebtn.setBackground(new java.awt.Color(52, 52, 52));
        Removebtn.setText("Remove");
        Removebtn.setActionCommand("ORDER");
        Removebtn.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        Removebtn.setkAllowGradient(false);
        Removebtn.setkBackGroundColor(new java.awt.Color(52, 52, 52));
        Removebtn.setkBorderRadius(30);
        Removebtn.setkForeGround(new java.awt.Color(240, 240, 240));
        Removebtn.setkHoverForeGround(new java.awt.Color(51, 51, 51));
        Removebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemovebtnActionPerformed(evt);
            }
        });

        Addbtn.setBackground(new java.awt.Color(52, 52, 52));
        Addbtn.setText("Add");
        Addbtn.setActionCommand("ORDER");
        Addbtn.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        Addbtn.setkAllowGradient(false);
        Addbtn.setkBackGroundColor(new java.awt.Color(52, 52, 52));
        Addbtn.setkBorderRadius(30);
        Addbtn.setkForeGround(new java.awt.Color(240, 240, 240));
        Addbtn.setkHoverForeGround(new java.awt.Color(51, 51, 51));
        Addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddbtnActionPerformed(evt);
            }
        });

        Paybtn.setBackground(new java.awt.Color(52, 52, 52));
        Paybtn.setText("Pay");
        Paybtn.setActionCommand("ORDER");
        Paybtn.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        Paybtn.setkAllowGradient(false);
        Paybtn.setkBackGroundColor(new java.awt.Color(52, 52, 52));
        Paybtn.setkBorderRadius(30);
        Paybtn.setkForeGround(new java.awt.Color(240, 240, 240));
        Paybtn.setkHoverForeGround(new java.awt.Color(51, 51, 51));
        Paybtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaybtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(72, 72, 72)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(PNametxt)
                                .addContainerGap())))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(Size1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Size2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Size3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(CategoryBox, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(56, 56, 56)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(Qty, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(Addbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Removebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9)
                            .addComponent(Totaltxt, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                            .addComponent(jLabel4)
                            .addComponent(Pricetxt, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                            .addComponent(Paymenttxt, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                            .addComponent(jLabel5)
                            .addComponent(Paybtn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CategoryBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Size1)
                            .addComponent(Size2)
                            .addComponent(Size3))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Addbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Removebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                                .addComponent(jLabel9)
                                .addGap(10, 10, 10)
                                .addComponent(Pricetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Totaltxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Paymenttxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Paybtn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(58, 58, 58))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 140, 440, 380));

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));

        Receipt.setColumns(20);
        Receipt.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        Receipt.setRows(5);
        Receipt.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        Receipt.setEnabled(false);
        jScrollPane1.setViewportView(Receipt);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 140, 460, 690));

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));

        Menutbl.setAutoCreateRowSorter(true);
        Menutbl.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        Menutbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product Name", "Category", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Menutbl.setGridColor(new java.awt.Color(0, 0, 0));
        Menutbl.setName(""); // NOI18N
        Menutbl.setOpaque(false);
        Menutbl.setRowHeight(20);
        Menutbl.setSelectionBackground(new java.awt.Color(204, 204, 204));
        Menutbl.setShowVerticalLines(false);
        Menutbl.getTableHeader().setResizingAllowed(false);
        Menutbl.getTableHeader().setReorderingAllowed(false);
        Menutbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MenutblMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Menutbl);
        if (Menutbl.getColumnModel().getColumnCount() > 0) {
            Menutbl.getColumnModel().getColumn(0).setResizable(false);
            Menutbl.getColumnModel().getColumn(0).setHeaderValue("ID");
            Menutbl.getColumnModel().getColumn(1).setResizable(false);
            Menutbl.getColumnModel().getColumn(2).setResizable(false);
            Menutbl.getColumnModel().getColumn(2).setHeaderValue("Category");
            Menutbl.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 732, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 550, 740, 280));

        jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));

        Ordertbl.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        Ordertbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product Name", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Ordertbl.setGridColor(new java.awt.Color(0, 0, 0));
        Ordertbl.setRowHeight(20);
        Ordertbl.setSelectionBackground(new java.awt.Color(255, 204, 204));
        Ordertbl.setShowVerticalLines(false);
        Ordertbl.getTableHeader().setResizingAllowed(false);
        Ordertbl.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(Ordertbl);
        if (Ordertbl.getColumnModel().getColumnCount() > 0) {
            Ordertbl.getColumnModel().getColumn(0).setResizable(false);
            Ordertbl.getColumnModel().getColumn(1).setResizable(false);
            Ordertbl.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 140, 290, 380));

        jPanel5.setBackground(new java.awt.Color(52, 52, 52));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Orderbtn.setBackground(new java.awt.Color(52, 52, 52));
        Orderbtn.setForeground(new java.awt.Color(51, 51, 51));
        Orderbtn.setText("ORDER");
        Orderbtn.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        Orderbtn.setkAllowGradient(false);
        Orderbtn.setkBackGroundColor(new java.awt.Color(240, 240, 240));
        Orderbtn.setkBorderRadius(30);
        Orderbtn.setkForeGround(new java.awt.Color(51, 51, 51));
        Orderbtn.setkHoverForeGround(new java.awt.Color(51, 51, 51));
        jPanel5.add(Orderbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 170, -1));

        Adminbtn.setBackground(new java.awt.Color(52, 52, 52));
        Adminbtn.setText("EDIT ADMIN");
        Adminbtn.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        Adminbtn.setkAllowGradient(false);
        Adminbtn.setkBackGroundColor(new java.awt.Color(52, 52, 52));
        Adminbtn.setkBorderRadius(30);
        Adminbtn.setkForeGround(new java.awt.Color(240, 240, 240));
        Adminbtn.setkHoverForeGround(new java.awt.Color(51, 51, 51));
        Adminbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminbtnActionPerformed(evt);
            }
        });
        jPanel5.add(Adminbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 170, -1));

        Userbtn.setBackground(new java.awt.Color(52, 52, 52));
        Userbtn.setText("EDIT USER");
        Userbtn.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        Userbtn.setkAllowGradient(false);
        Userbtn.setkBackGroundColor(new java.awt.Color(52, 52, 52));
        Userbtn.setkBorderRadius(30);
        Userbtn.setkForeGround(new java.awt.Color(240, 240, 240));
        Userbtn.setkHoverForeGround(new java.awt.Color(51, 51, 51));
        Userbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserbtnActionPerformed(evt);
            }
        });
        jPanel5.add(Userbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 260, 170, -1));

        Salesbtn.setBackground(new java.awt.Color(52, 52, 52));
        Salesbtn.setText("SALES");
        Salesbtn.setActionCommand("ORDER");
        Salesbtn.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        Salesbtn.setkAllowGradient(false);
        Salesbtn.setkBackGroundColor(new java.awt.Color(52, 52, 52));
        Salesbtn.setkBorderRadius(30);
        Salesbtn.setkForeGround(new java.awt.Color(240, 240, 240));
        Salesbtn.setkHoverForeGround(new java.awt.Color(51, 51, 51));
        Salesbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalesbtnActionPerformed(evt);
            }
        });
        jPanel5.add(Salesbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 170, -1));

        Logoutbtn.setBackground(new java.awt.Color(52, 52, 52));
        Logoutbtn.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        Logoutbtn.setForeground(new java.awt.Color(52, 52, 52));
        Logoutbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/log-out-icon-27res_1.png"))); // NOI18N
        Logoutbtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Logoutbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LogoutbtnMouseClicked(evt);
            }
        });
        jPanel5.add(Logoutbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 850, -1, -1));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/anteikusmol.png"))); // NOI18N
        jPanel5.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));

        kButton1.setkAllowGradient(false);
        kButton1.setkBackGroundColor(new java.awt.Color(229, 199, 137));
        kButton1.setkBorderRadius(400);
        kButton1.setkEndColor(new java.awt.Color(229, 199, 137));
        kButton1.setkForeGround(new java.awt.Color(229, 199, 137));
        kButton1.setkHoverColor(new java.awt.Color(229, 199, 137));
        kButton1.setkHoverEndColor(new java.awt.Color(229, 199, 137));
        kButton1.setkHoverForeGround(new java.awt.Color(229, 199, 137));
        kButton1.setkHoverStartColor(new java.awt.Color(229, 199, 137));
        kButton1.setkIndicatorColor(new java.awt.Color(229, 199, 137));
        kButton1.setkPressedColor(new java.awt.Color(229, 199, 137));
        kButton1.setkSelectedColor(new java.awt.Color(229, 199, 137));
        kButton1.setkStartColor(new java.awt.Color(229, 199, 137));
        jPanel5.add(kButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 110, 100));

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 170, 920));

        Resetbtn.setBackground(new java.awt.Color(52, 52, 52));
        Resetbtn.setText("Reset");
        Resetbtn.setActionCommand("ORDER");
        Resetbtn.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        Resetbtn.setkAllowGradient(false);
        Resetbtn.setkBackGroundColor(new java.awt.Color(52, 52, 52));
        Resetbtn.setkBorderRadius(30);
        Resetbtn.setkForeGround(new java.awt.Color(240, 240, 240));
        Resetbtn.setkHoverForeGround(new java.awt.Color(51, 51, 51));
        Resetbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetbtnActionPerformed(evt);
            }
        });
        getContentPane().add(Resetbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 840, 80, 26));

        Closebtn.setBackground(new java.awt.Color(52, 52, 52));
        Closebtn.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        Closebtn.setForeground(new java.awt.Color(52, 52, 52));
        Closebtn.setText("X");
        Closebtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Closebtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ClosebtnMouseClicked(evt);
            }
        });
        getContentPane().add(Closebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1530, 10, -1, -1));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/bgyea.png"))); // NOI18N
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void IDtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDtxtActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_IDtxtActionPerformed

    private void TotaltxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TotaltxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TotaltxtActionPerformed

    private void PaymenttxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaymenttxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PaymenttxtActionPerformed

    private void PNametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PNametxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PNametxtActionPerformed

    private void CategoryBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryBoxActionPerformed

    }//GEN-LAST:event_CategoryBoxActionPerformed

    private void MenutblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MenutblMouseClicked
        // TODO add your handling code here:
        int SelectedRow = Menutbl.getSelectedRow();
        DefaultTableModel tblModel = (DefaultTableModel)Menutbl.getModel();
        
        IDtxt.setText(tblModel.getValueAt(SelectedRow,0).toString());
        PNametxt.setText(tblModel.getValueAt(SelectedRow,1).toString());
        Pricetxt.setText(tblModel.getValueAt(SelectedRow, 3).toString());
        
        if(Menutbl.getValueAt(SelectedRow, 2).equals("Cold Drinks")||Menutbl.getValueAt(SelectedRow, 2).equals("Hot Drinks")||Menutbl.getValueAt(SelectedRow, 2).equals("Frappe")){
            Size1.setVisible(true);
            Size2.setVisible(true);
            Size3.setVisible(true);
        }
        else{
            Size1.setVisible(false);
            Size2.setVisible(false);
            Size3.setVisible(false);
        }
    }//GEN-LAST:event_MenutblMouseClicked

    private void PricetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PricetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PricetxtActionPerformed

    private void CategoryBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CategoryBoxItemStateChanged
        // TODO add your handling code here:
        if (CategoryBox.getSelectedIndex() == 0){
            Menutbl.setModel(new DefaultTableModel(null,new String[]{"ID","Product Name","Category", "Price"}));
            Size1.setVisible(false);
            Size2.setVisible(false);
            Size3.setVisible(false);
 
            try {
            // TODO add your handling code here:
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String connectionUrl = "jdbc:sqlserver://DESKTOP-AQ0ITDE\\MSSQLSERVER;databaseName=RMSproject;user=admin;password=root;encrypt=true;trustServerCertificate=true;";
            Connection con = DriverManager.getConnection(connectionUrl);

            String sql = "select * from FoodItem";
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            
            while(rs.next()){
                String ID = String.valueOf(rs.getInt("FoodID"));
                String ProductName = rs.getString("Product_Name");
                String FoodCategory = rs.getString("FoodCategory");
                String Price = String.valueOf(rs.getInt("Price"));
                
                String tbData[] = {ID,ProductName,FoodCategory,Price};
                DefaultTableModel tblModel = (DefaultTableModel)Menutbl.getModel();
                tblModel.addRow(tbData);
                 }
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Order.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        }
        else if(CategoryBox.getSelectedIndex() == 1){
            Menutbl.setModel(new DefaultTableModel(null,new String[]{"ID","Product Name","Category", "Price"}));
            Size1.setVisible(false);
            Size2.setVisible(false);
            Size3.setVisible(false);
            
            try {
            // TODO add your handling code here:
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String connectionUrl = "jdbc:sqlserver://DESKTOP-AQ0ITDE\\MSSQLSERVER;databaseName=RMSproject;user=admin;password=root;encrypt=true;trustServerCertificate=true;";
            Connection con = DriverManager.getConnection(connectionUrl);

            String sql = "select * from FoodItem where FoodCategory = 'Cake'";
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            
            while(rs.next()){
                String ID = String.valueOf(rs.getInt("FoodID"));
                String ProductName = rs.getString("Product_Name");
                String FoodCategory = rs.getString("FoodCategory");
                String Price = String.valueOf(rs.getInt("Price"));
                
                String tbData[] = {ID,ProductName,FoodCategory,Price};
                DefaultTableModel tblModel = (DefaultTableModel)Menutbl.getModel();
                tblModel.addRow(tbData);
                 }
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Order.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
        else if(CategoryBox.getSelectedIndex() == 2){
            Menutbl.setModel(new DefaultTableModel(null,new String[]{"ID","Product Name","Category", "Price"}));
            Size1.setVisible(false);
            Size2.setVisible(false);
            Size3.setVisible(false);
            
            try {
            // TODO add your handling code here:
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String connectionUrl = "jdbc:sqlserver://DESKTOP-AQ0ITDE\\MSSQLSERVER;databaseName=RMSproject;user=admin;password=root;encrypt=true;trustServerCertificate=true;";
            Connection con = DriverManager.getConnection(connectionUrl);

            String sql = "select * from FoodItem where FoodCategory = 'Cheesecakes'";
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            
            while(rs.next()){
                String ID = String.valueOf(rs.getInt("FoodID"));
                String ProductName = rs.getString("Product_Name");
                String FoodCategory = rs.getString("FoodCategory");
                String Price = String.valueOf(rs.getInt("Price"));
                
                String tbData[] = {ID,ProductName,FoodCategory,Price};
                DefaultTableModel tblModel = (DefaultTableModel)Menutbl.getModel();
                tblModel.addRow(tbData);
                 }
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Order.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
        else if(CategoryBox.getSelectedIndex() == 3){
            Menutbl.setModel(new DefaultTableModel(null,new String[]{"ID","Product Name","Category", "Price"}));
            Size1.setVisible(false);
            Size2.setVisible(false);
            Size3.setVisible(false);
            
            try {
            // TODO add your handling code here:
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String connectionUrl = "jdbc:sqlserver://DESKTOP-AQ0ITDE\\MSSQLSERVER;databaseName=RMSproject;user=admin;password=root;encrypt=true;trustServerCertificate=true;";
            Connection con = DriverManager.getConnection(connectionUrl);

            String sql = "select * from FoodItem where FoodCategory = 'Cold Drinks'";
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            
            while(rs.next()){
                String ID = String.valueOf(rs.getInt("FoodID"));
                String ProductName = rs.getString("Product_Name");
                String FoodCategory = rs.getString("FoodCategory");
                String Price = String.valueOf(rs.getInt("Price"));
                
                String tbData[] = {ID,ProductName,FoodCategory,Price};
                DefaultTableModel tblModel = (DefaultTableModel)Menutbl.getModel();
                tblModel.addRow(tbData);
                 }
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Order.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
        else if(CategoryBox.getSelectedIndex() == 4){
            Menutbl.setModel(new DefaultTableModel(null,new String[]{"ID","Product Name","Category", "Price"}));
            Size1.setVisible(false);
            Size2.setVisible(false);
            Size3.setVisible(false);
            
            try {
            // TODO add your handling code here:
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String connectionUrl = "jdbc:sqlserver://DESKTOP-AQ0ITDE\\MSSQLSERVER;databaseName=RMSproject;user=admin;password=root;encrypt=true;trustServerCertificate=true;";
            Connection con = DriverManager.getConnection(connectionUrl);

            String sql = "select * from FoodItem where FoodCategory = 'Frappe'";
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            
            while(rs.next()){
                String ID = String.valueOf(rs.getInt("FoodID"));
                String ProductName = rs.getString("Product_Name");
                String FoodCategory = rs.getString("FoodCategory");
                String Price = String.valueOf(rs.getInt("Price"));
                
                String tbData[] = {ID,ProductName,FoodCategory,Price};
                DefaultTableModel tblModel = (DefaultTableModel)Menutbl.getModel();
                tblModel.addRow(tbData);
                 }
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Order.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
        else if(CategoryBox.getSelectedIndex() == 5){
            Menutbl.setModel(new DefaultTableModel(null,new String[]{"ID","Product Name","Category", "Price"}));
            Size1.setVisible(false);
            Size2.setVisible(false);
            Size3.setVisible(false);
            
            try {
            // TODO add your handling code here:
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String connectionUrl = "jdbc:sqlserver://DESKTOP-AQ0ITDE\\MSSQLSERVER;databaseName=RMSproject;user=admin;password=root;encrypt=true;trustServerCertificate=true;";
            Connection con = DriverManager.getConnection(connectionUrl);

            String sql = "select * from FoodItem where FoodCategory = 'Hot Drinks'";
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            
            while(rs.next()){
                String ID = String.valueOf(rs.getInt("FoodID"));
                String ProductName = rs.getString("Product_Name");
                String FoodCategory = rs.getString("FoodCategory");
                String Price = String.valueOf(rs.getInt("Price"));
                
                String tbData[] = {ID,ProductName,FoodCategory,Price};
                DefaultTableModel tblModel = (DefaultTableModel)Menutbl.getModel();
                tblModel.addRow(tbData);
                 }
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Order.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
        else if(CategoryBox.getSelectedIndex() == 6){
            Menutbl.setModel(new DefaultTableModel(null,new String[]{"ID","Product Name","Category", "Price"}));
            Size1.setVisible(false);
            Size2.setVisible(false);
            Size3.setVisible(false);
            
            try {
            // TODO add your handling code here:
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String connectionUrl = "jdbc:sqlserver://DESKTOP-AQ0ITDE\\MSSQLSERVER;databaseName=RMSproject;user=admin;password=root;encrypt=true;trustServerCertificate=true;";
            Connection con = DriverManager.getConnection(connectionUrl);

            String sql = "select * from FoodItem where FoodCategory = 'Ice Cream'";
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            
            while(rs.next()){
                String ID = String.valueOf(rs.getInt("FoodID"));
                String ProductName = rs.getString("Product_Name");
                String FoodCategory = rs.getString("FoodCategory");
                String Price = String.valueOf(rs.getInt("Price"));
                
                String tbData[] = {ID,ProductName,FoodCategory,Price};
                DefaultTableModel tblModel = (DefaultTableModel)Menutbl.getModel();
                tblModel.addRow(tbData);
                 }
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Order.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
        else if(CategoryBox.getSelectedIndex() == 7){
            Menutbl.setModel(new DefaultTableModel(null,new String[]{"ID","Product Name","Category", "Price"}));
            Size1.setVisible(false);
            Size2.setVisible(false);
            Size3.setVisible(false);
            
            try {
            // TODO add your handling code here:
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String connectionUrl = "jdbc:sqlserver://DESKTOP-AQ0ITDE\\MSSQLSERVER;databaseName=RMSproject;user=admin;password=root;encrypt=true;trustServerCertificate=true;";
            Connection con = DriverManager.getConnection(connectionUrl);

            String sql = "select * from FoodItem where FoodCategory = 'Sandwiches'";
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            
            while(rs.next()){
                String ID = String.valueOf(rs.getInt("FoodID"));
                String ProductName = rs.getString("Product_Name");
                String FoodCategory = rs.getString("FoodCategory");
                String Price = String.valueOf(rs.getInt("Price"));
                
                String tbData[] = {ID,ProductName,FoodCategory,Price};
                DefaultTableModel tblModel = (DefaultTableModel)Menutbl.getModel();
                tblModel.addRow(tbData);
                 }
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Order.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_CategoryBoxItemStateChanged

    private void Size3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Size3ActionPerformed
       
    }//GEN-LAST:event_Size3ActionPerformed

    private void AdminbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminbtnActionPerformed
        // TODO add your handling code here:
        Admin ad = new Admin();
        ad.show();
        dispose();
    }//GEN-LAST:event_AdminbtnActionPerformed

    private void AddbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddbtnActionPerformed
        // TODO add your handling code here:
        int Total = 0;
        if(IDtxt.getText().equals("")||PNametxt.getText().equals("")||Pricetxt.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please enter a data.");
        }
        else{
            if(Size1.isSelected()){
            Integer myInt = (Integer) Qty.getValue();
            String myInt1 = Pricetxt.getText();
            String ID = IDtxt.getText();
            int prc = Integer.parseInt(myInt1);
            
            Total = myInt * prc;
            
            String all = String.valueOf(Total);
            
            String data[] = {ID,PNametxt.getText(),all};
            DefaultTableModel tblModel = (DefaultTableModel)Ordertbl.getModel();
            tblModel.addRow(data);
            
            int sum = 0;
            for(int i = 0;i<Ordertbl.getRowCount();i++){
                sum = sum + Integer.parseInt(Ordertbl.getValueAt(i,2).toString());
            }
            Totaltxt.setText(Integer.toString(sum));   
        }
            
            else if(Size2.isSelected()){
            Integer myInt = (Integer) Qty.getValue();
            String myInt1 = Pricetxt.getText();
            String ID = IDtxt.getText();
            int prc = Integer.parseInt(myInt1);
            
            Total = myInt * (prc + 20);
            
            String all = String.valueOf(Total);
            
            String data[] = {ID,"(TL)"+PNametxt.getText(),all};
            DefaultTableModel tblModel = (DefaultTableModel)Ordertbl.getModel();
            tblModel.addRow(data);
            
            int sum = 0;
            for(int i = 0;i<Ordertbl.getRowCount();i++){
                sum = sum + Integer.parseInt(Ordertbl.getValueAt(i,2).toString());
            }
            Totaltxt.setText(Integer.toString(sum));
            }
            
            else if(Size3.isSelected()){
            Integer myInt = (Integer) Qty.getValue();
            String myInt1 = Pricetxt.getText();
            String ID = IDtxt.getText();
            int prc = Integer.parseInt(myInt1);
            
            Total = myInt * (prc + 40);
            
            String all = String.valueOf(Total);
            
            String data[] = {ID,"(GR)"+PNametxt.getText(),all};
            DefaultTableModel tblModel = (DefaultTableModel)Ordertbl.getModel();
            tblModel.addRow(data);
            
            int sum = 0;
            for(int i = 0;i<Ordertbl.getRowCount();i++){
                sum = sum + Integer.parseInt(Ordertbl.getValueAt(i,2).toString());
            }
            Totaltxt.setText(Integer.toString(sum));
            }
            
            else{
            Integer myInt = (Integer) Qty.getValue();
            String myInt1 = Pricetxt.getText();
            String ID = IDtxt.getText();
            int prc = Integer.parseInt(myInt1);
            
            Total = myInt * prc;
            
            String all = String.valueOf(Total);
            
            String data[] = {ID,PNametxt.getText(),all};
            DefaultTableModel tblModel = (DefaultTableModel)Ordertbl.getModel();
            tblModel.addRow(data);
            
            int sum = 0;
            for(int i = 0;i<Ordertbl.getRowCount();i++){
                sum = sum + Integer.parseInt(Ordertbl.getValueAt(i,2).toString());
            }
            Totaltxt.setText(Integer.toString(sum));
            }
            
        }
        
    }//GEN-LAST:event_AddbtnActionPerformed

    private void RemovebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemovebtnActionPerformed
        // TODO add your handling code here:
            int SelectedRow = Ordertbl.getSelectedRow();
            int sub = Integer.parseInt(Ordertbl.getValueAt(SelectedRow, 2).toString());
            
            String int1 = Totaltxt.getText();
            int total = Integer.parseInt(int1);
            int tota = total - sub;
            
            String tot = String.valueOf(tota);
            
            Totaltxt.setText(tot);
            
            DefaultTableModel tblModel = (DefaultTableModel)Ordertbl.getModel();
            tblModel.removeRow(SelectedRow); 
    }//GEN-LAST:event_RemovebtnActionPerformed

    private void PaybtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaybtnActionPerformed
        // TODO add your handling code here:
        
        if(Totaltxt.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please enter an item.");
        }
        else if(Paymenttxt.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please add a Payment");
        }
        else{
        String CID = JOptionPane.showInputDialog("Enter Customer ID: ");
            try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String connectionUrl = "jdbc:sqlserver://DESKTOP-AQ0ITDE\\MSSQLSERVER;databaseName=RMSproject;user=admin;password=root;encrypt=true;trustServerCertificate=true;";
            Connection con = DriverManager.getConnection(connectionUrl);

            String sql = "select * from Customer where CustomerID ='"+CID+"'";
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            
            while(rs.next()){
                String ID = String.valueOf(rs.getInt("CustomerID"));
                String Fname = rs.getString("Fname");
                String Lname = rs.getString("Lname");
        if(CID.equals("")||CID.equals(" ")){
        JOptionPane.showMessageDialog(this,"Enter Customer ID: ");
        }
        else if(!rs.isBeforeFirst() && rs.getRow() == 0){
            JOptionPane.showMessageDialog(this,"Please enter a valid Customer ID");
        }
        else{
        Receipt.setText("");
        String paya = Paymenttxt.getText();
        int pay = Integer.parseInt(paya);
        String a = String.valueOf(pay).trim();
        
        String Tot = Totaltxt.getText();
        int total = Integer.parseInt(Tot);
        
        double dtot = total;
        double tax = dtot * .05;
        double ptot = total + tax;
        
        double change = 0;
        
        if(pay<ptot){
            JOptionPane.showMessageDialog(this,"You have insufficient funds!");
        }
        else{
            
            change = pay - ptot;
            //=================================================================
            
            int refs=1001 + (int) (Math.random()*9111);
            
            //=================================================================
            
            Calendar timer = Calendar.getInstance();
            timer.getTime();
            SimpleDateFormat tTime = new SimpleDateFormat("HH:mm:ss");
            String Time = tTime.format(timer.getTime());
            SimpleDateFormat Tdate = new SimpleDateFormat("yyyy-MM-dd");
            String Date = Tdate.format(timer.getTime());
            
            Receipt.append("\nResturant Management System\n" +
                    "Ref #:\t\t\t" + refs + 
                    "\n==================================================\n" +
                    "Order:\t\t");
            for(int i = 0;i<Ordertbl.getRowCount();i++){
                String name = Ordertbl.getValueAt(i,0).toString();
                Receipt.append(name + "\n\t\t");
            }
            
            Receipt.append("\n==================================================\n" +
                    "Sub Total:" +"\t"+ Totaltxt.getText() +"\nTax 5%:\t\t" + tax + "\n\nTotal:\t\t" + ptot +
                    "\n\n==================================================\n" +
                    "Cash:\t\t" + Paymenttxt.getText() + "\nChange:\t\t" + change +
                    "\n\n==================================================\n" +
                    "Date: " + Tdate.format(timer.getTime()) +
                    "\nTime: " + tTime.format(timer.getTime()) +
                    "\nThank you!" + Fname + " " +Lname
                    ); 
        try {
            for(int i = 0;i<Ordertbl.getRowCount();i++){
            String PID = Ordertbl.getValueAt(i,0).toString();

            Statement stma = con.createStatement();
            String sqla = "insert into Orders values("+PID+","+CID+",100,"+refs+",'"+Date+"','"+Time+"')";
            int rsa = stm.executeUpdate(sqla);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Order.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        }
                 }
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Order.class.getName()).log(Level.SEVERE, null, ex);
        }
        

        }
        
    }//GEN-LAST:event_PaybtnActionPerformed

    private void ResetbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetbtnActionPerformed
        // TODO add your handling code here:
        Ordertbl.setModel(new DefaultTableModel(null,new String[]{"Product Name", "Price"}));

        IDtxt.setText("");
        PNametxt.setText("");
        Pricetxt.setText("");
        Totaltxt.setText("");
        Paymenttxt.setText("");
        Receipt.setText("");
        
        Menutbl.setModel(new DefaultTableModel(null,new String[]{"ID","Product Name","Category", "Price"}));
            
            try {
            // TODO add your handling code here:
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String connectionUrl = "jdbc:sqlserver://DESKTOP-AQ0ITDE\\MSSQLSERVER;databaseName=RMSproject;user=admin;password=root;encrypt=true;trustServerCertificate=true;";
            Connection con = DriverManager.getConnection(connectionUrl);

            String sql = "select * from FoodItem";
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            
            while(rs.next()){
                String ID = String.valueOf(rs.getInt("FoodID"));
                String ProductName = rs.getString("Product_Name");
                String FoodCategory = rs.getString("FoodCategory");
                String Price = String.valueOf(rs.getInt("Price"));
                
                String tbData[] = {ID,ProductName,FoodCategory,Price};
                DefaultTableModel tblModel = (DefaultTableModel)Menutbl.getModel();
                tblModel.addRow(tbData);
                 }
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Order.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ResetbtnActionPerformed

    private void LogoutbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogoutbtnMouseClicked
        // TODO add your handling code here:
        dispose();
        Login log = new Login();
        log.show();
    }//GEN-LAST:event_LogoutbtnMouseClicked

    private void ClosebtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ClosebtnMouseClicked
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_ClosebtnMouseClicked

    private void UserbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserbtnActionPerformed
        // TODO add your handling code here:
        dispose();
        User us = new User();
        us.show();
    }//GEN-LAST:event_UserbtnActionPerformed

    private void SalesbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalesbtnActionPerformed
        // TODO add your handling code here:
        dispose();
        Sales sa = new Sales();
        sa.show();   
    }//GEN-LAST:event_SalesbtnActionPerformed

    public void CategoryBox(){
    try {
            // TODO add your handling code here:
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String connectionUrl = "jdbc:sqlserver://DESKTOP-AQ0ITDE\\MSSQLSERVER;databaseName=RMSproject;user=admin;password=root;encrypt=true;trustServerCertificate=true;";
            Connection con = DriverManager.getConnection(connectionUrl);

            String sql = "select CategoryID from Category";
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            
            while(rs.next()){
                CategoryBox.addItem(rs.getString("CategoryID"));
                 }
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Order.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
public void Size(){
    Size1.setVisible(false);
    Size2.setVisible(false);
    Size3.setVisible(false);
}
    
    public void ProductList(){
        try {
            // TODO add your handling code here:
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String connectionUrl = "jdbc:sqlserver://DESKTOP-AQ0ITDE\\MSSQLSERVER;databaseName=RMSproject;user=admin;password=root;encrypt=true;trustServerCertificate=true;";
            Connection con = DriverManager.getConnection(connectionUrl);

            Statement stm = con.createStatement();
            String sql = "select * from FoodItem";
            ResultSet rs = stm.executeQuery(sql);
            
            while(rs.next()){
                String ID = String.valueOf(rs.getInt("FoodID"));
                String ProductName = rs.getString("Product_Name");
                String FoodCategory = rs.getString("FoodCategory");
                String Price = String.valueOf(rs.getInt("Price"));
                
                String tbData[] = {ID,ProductName,FoodCategory,Price};
                DefaultTableModel tblModel = (DefaultTableModel)Menutbl.getModel();
                tblModel.addRow(tbData);
                
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Order.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void burrons(){
        Orderbtn.setBorderPainted(false);
        Adminbtn.setBorderPainted(false);
        Userbtn.setBorderPainted(false);
        Salesbtn.setBorderPainted(false);
        Addbtn.setBorderPainted(false);
        Removebtn.setBorderPainted(false);
        Paybtn.setBorderPainted(false);
        Resetbtn.setBorderPainted(false);
        kButton1.setBorderPainted(false);
    }
    public static void main(String args[]){
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Order().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.k33ptoo.components.KButton Addbtn;
    private com.k33ptoo.components.KButton Adminbtn;
    private javax.swing.JComboBox<String> CategoryBox;
    private javax.swing.JLabel Closebtn;
    private javax.swing.JTextField IDtxt;
    private javax.swing.JLabel Logoutbtn;
    private javax.swing.JTable Menutbl;
    private com.k33ptoo.components.KButton Orderbtn;
    private javax.swing.JTable Ordertbl;
    private javax.swing.JTextField PNametxt;
    private com.k33ptoo.components.KButton Paybtn;
    private javax.swing.JTextField Paymenttxt;
    private javax.swing.JTextField Pricetxt;
    private javax.swing.JSpinner Qty;
    private javax.swing.JTextArea Receipt;
    private com.k33ptoo.components.KButton Removebtn;
    private com.k33ptoo.components.KButton Resetbtn;
    private com.k33ptoo.components.KButton Salesbtn;
    private javax.swing.JCheckBox Size1;
    private javax.swing.JCheckBox Size2;
    private javax.swing.JCheckBox Size3;
    private javax.swing.ButtonGroup SizeGroup;
    private javax.swing.JTextField Totaltxt;
    private com.k33ptoo.components.KButton Userbtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private com.k33ptoo.components.KButton kButton1;
    // End of variables declaration//GEN-END:variables
}
